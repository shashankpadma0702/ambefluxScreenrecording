{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SHASHANK PADMA\\\\Desktop\\\\nxtwaveprojectfolder\\\\amberflux Assignment\\\\frontend\\\\src\\\\components\\\\RecordScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { uploadRecording } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecordScreen = ({\n  onRecordingComplete\n}) => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [recordedChunks, setRecordedChunks] = useState([]);\n  const [timer, setTimer] = useState(0);\n  const [error, setError] = useState('');\n  const [uploading, setUploading] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const streamRef = useRef(null);\n  const timerRef = useRef(null);\n  const MAX_RECORDING_TIME = 180; // 3 minutes in seconds\n\n  const startRecording = async () => {\n    try {\n      setError('');\n\n      // Get screen stream\n      const screenStream = await navigator.mediaDevices.getDisplayMedia({\n        video: {\n          mediaSource: 'screen'\n        }\n      });\n\n      // Get microphone audio\n      const audioStream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n\n      // Combine streams\n      const combinedStream = new MediaStream([...screenStream.getVideoTracks(), ...audioStream.getAudioTracks()]);\n      streamRef.current = combinedStream;\n\n      // Create media recorder\n      const mediaRecorder = new MediaRecorder(combinedStream, {\n        mimeType: 'video/webm;codecs=vp9,opus'\n      });\n      mediaRecorderRef.current = mediaRecorder;\n      setRecordedChunks([]);\n      mediaRecorder.ondataavailable = e => {\n        if (e.data.size > 0) {\n          setRecordedChunks(prev => [...prev, e.data]);\n        }\n      };\n      mediaRecorder.onstop = () => {\n        // Stop all tracks\n        combinedStream.getTracks().forEach(track => track.stop());\n      };\n      mediaRecorder.start();\n      setRecording(true);\n\n      // Start timer\n      let seconds = 0;\n      timerRef.current = setInterval(() => {\n        seconds++;\n        setTimer(seconds);\n        if (seconds >= MAX_RECORDING_TIME) {\n          stopRecording();\n        }\n      }, 1000);\n    } catch (err) {\n      setError('Failed to start recording: ' + err.message);\n      console.error('Recording error:', err);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.stop();\n      setRecording(false);\n      clearInterval(timerRef.current);\n    }\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  const downloadRecording = () => {\n    if (recordedChunks.length === 0) return;\n    const blob = new Blob(recordedChunks, {\n      type: 'video/webm'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `screen-recording-${Date.now()}.webm`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n  const uploadRecordingToServer = async () => {\n    if (recordedChunks.length === 0) return;\n    try {\n      setUploading(true);\n      const blob = new Blob(recordedChunks, {\n        type: 'video/webm'\n      });\n      const formData = new FormData();\n      formData.append('video', blob, `screen-recording-${Date.now()}.webm`);\n      const response = await uploadRecording(formData);\n      setUploading(false);\n      if (onRecordingComplete) {\n        onRecordingComplete();\n      }\n      alert('Recording uploaded successfully!');\n      setRecordedChunks([]);\n      setTimer(0);\n    } catch (err) {\n      setUploading(false);\n      setError('Failed to upload recording: ' + err.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"record-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Screen Recorder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [!recording ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startRecording,\n        disabled: recording,\n        children: \"Start Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopRecording,\n        disabled: !recording,\n        children: \"Stop Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: formatTime(timer)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), recordedChunks.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-recording\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: downloadRecording,\n        disabled: uploading,\n        children: \"Download Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: uploadRecordingToServer,\n        disabled: uploading,\n        children: uploading ? 'Uploading...' : 'Upload to Server'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this), timer >= MAX_RECORDING_TIME - 10 && timer < MAX_RECORDING_TIME && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"warning\",\n      children: [\"Recording will stop automatically in \", MAX_RECORDING_TIME - timer, \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(RecordScreen, \"NjxfQfjJ5HQotTy/komxDglMsDI=\");\n_c = RecordScreen;\nexport default RecordScreen;\nvar _c;\n$RefreshReg$(_c, \"RecordScreen\");","map":{"version":3,"names":["React","useState","useRef","uploadRecording","jsxDEV","_jsxDEV","RecordScreen","onRecordingComplete","_s","recording","setRecording","recordedChunks","setRecordedChunks","timer","setTimer","error","setError","uploading","setUploading","mediaRecorderRef","streamRef","timerRef","MAX_RECORDING_TIME","startRecording","screenStream","navigator","mediaDevices","getDisplayMedia","video","mediaSource","audioStream","getUserMedia","audio","combinedStream","MediaStream","getVideoTracks","getAudioTracks","current","mediaRecorder","MediaRecorder","mimeType","ondataavailable","e","data","size","prev","onstop","getTracks","forEach","track","stop","start","seconds","setInterval","stopRecording","err","message","console","state","clearInterval","formatTime","mins","Math","floor","secs","toString","padStart","downloadRecording","length","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","Date","now","click","revokeObjectURL","uploadRecordingToServer","formData","FormData","append","response","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/SHASHANK PADMA/Desktop/nxtwaveprojectfolder/amberflux Assignment/frontend/src/components/RecordScreen.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { uploadRecording } from '../services/api';\r\n\r\nconst RecordScreen = ({ onRecordingComplete }) => {\r\n  const [recording, setRecording] = useState(false);\r\n  const [recordedChunks, setRecordedChunks] = useState([]);\r\n  const [timer, setTimer] = useState(0);\r\n  const [error, setError] = useState('');\r\n  const [uploading, setUploading] = useState(false);\r\n  \r\n  const mediaRecorderRef = useRef(null);\r\n  const streamRef = useRef(null);\r\n  const timerRef = useRef(null);\r\n\r\n  const MAX_RECORDING_TIME = 180; // 3 minutes in seconds\r\n\r\n  const startRecording = async () => {\r\n    try {\r\n      setError('');\r\n      \r\n      // Get screen stream\r\n      const screenStream = await navigator.mediaDevices.getDisplayMedia({\r\n        video: { mediaSource: 'screen' }\r\n      });\r\n      \r\n      // Get microphone audio\r\n      const audioStream = await navigator.mediaDevices.getUserMedia({\r\n        audio: true\r\n      });\r\n      \r\n      // Combine streams\r\n      const combinedStream = new MediaStream([\r\n        ...screenStream.getVideoTracks(),\r\n        ...audioStream.getAudioTracks()\r\n      ]);\r\n      \r\n      streamRef.current = combinedStream;\r\n      \r\n      // Create media recorder\r\n      const mediaRecorder = new MediaRecorder(combinedStream, {\r\n        mimeType: 'video/webm;codecs=vp9,opus'\r\n      });\r\n      \r\n      mediaRecorderRef.current = mediaRecorder;\r\n      setRecordedChunks([]);\r\n      \r\n      mediaRecorder.ondataavailable = (e) => {\r\n        if (e.data.size > 0) {\r\n          setRecordedChunks(prev => [...prev, e.data]);\r\n        }\r\n      };\r\n      \r\n      mediaRecorder.onstop = () => {\r\n        // Stop all tracks\r\n        combinedStream.getTracks().forEach(track => track.stop());\r\n      };\r\n      \r\n      mediaRecorder.start();\r\n      setRecording(true);\r\n      \r\n      // Start timer\r\n      let seconds = 0;\r\n      timerRef.current = setInterval(() => {\r\n        seconds++;\r\n        setTimer(seconds);\r\n        \r\n        if (seconds >= MAX_RECORDING_TIME) {\r\n          stopRecording();\r\n        }\r\n      }, 1000);\r\n      \r\n    } catch (err) {\r\n      setError('Failed to start recording: ' + err.message);\r\n      console.error('Recording error:', err);\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\r\n      mediaRecorderRef.current.stop();\r\n      setRecording(false);\r\n      clearInterval(timerRef.current);\r\n    }\r\n  };\r\n\r\n  const formatTime = (seconds) => {\r\n    const mins = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  const downloadRecording = () => {\r\n    if (recordedChunks.length === 0) return;\r\n    \r\n    const blob = new Blob(recordedChunks, { type: 'video/webm' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `screen-recording-${Date.now()}.webm`;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const uploadRecordingToServer = async () => {\r\n    if (recordedChunks.length === 0) return;\r\n    \r\n    try {\r\n      setUploading(true);\r\n      const blob = new Blob(recordedChunks, { type: 'video/webm' });\r\n      const formData = new FormData();\r\n      formData.append('video', blob, `screen-recording-${Date.now()}.webm`);\r\n      \r\n      const response = await uploadRecording(formData);\r\n      setUploading(false);\r\n      \r\n      if (onRecordingComplete) {\r\n        onRecordingComplete();\r\n      }\r\n      \r\n      alert('Recording uploaded successfully!');\r\n      setRecordedChunks([]);\r\n      setTimer(0);\r\n    } catch (err) {\r\n      setUploading(false);\r\n      setError('Failed to upload recording: ' + err.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"record-screen\">\r\n      <h2>Screen Recorder</h2>\r\n      \r\n      {error && <div className=\"error\">{error}</div>}\r\n      \r\n      <div className=\"controls\">\r\n        {!recording ? (\r\n          <button onClick={startRecording} disabled={recording}>\r\n            Start Recording\r\n          </button>\r\n        ) : (\r\n          <button onClick={stopRecording} disabled={!recording}>\r\n            Stop Recording\r\n          </button>\r\n        )}\r\n        \r\n        <div className=\"timer\">{formatTime(timer)}</div>\r\n      </div>\r\n      \r\n      {recordedChunks.length > 0 && (\r\n        <div className=\"post-recording\">\r\n          <button onClick={downloadRecording} disabled={uploading}>\r\n            Download Recording\r\n          </button>\r\n          <button onClick={uploadRecordingToServer} disabled={uploading}>\r\n            {uploading ? 'Uploading...' : 'Upload to Server'}\r\n          </button>\r\n        </div>\r\n      )}\r\n      \r\n      {timer >= MAX_RECORDING_TIME - 10 && timer < MAX_RECORDING_TIME && (\r\n        <div className=\"warning\">\r\n          Recording will stop automatically in {MAX_RECORDING_TIME - timer} seconds\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecordScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}